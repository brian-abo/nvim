-- Usage: :ExportKeymaps

local M = {}

-- Convert keymaps of a given mode to a markdown table section
---@param mode string
---@param title string
---@param get function
local function collect_mappings(mode, title, get)
  local categorized_by_mode = {
    n = {
      ["Debug"] = {
        title = "### 🧪 Debugging",
        keys = { "<leader>d", "<leader>dr", "<leader>dc", "<leader>dp", "<leader>dE" },
      },
      ["Terminal"] = { title = "### 💻 Terminal Shortcuts", keys = { "<leader>q", "<leader>t" } },
      ["Telescope"] = { title = "### 🔍 Search & Telescope", keys = { "<leader>f" } },
      ["UI"] = { title = "### 🎛️ UI Toggles", keys = { "<leader>u" } },
      ["Session"] = { title = "### 🧾 Session Management", keys = { "<leader>S" } },
      ["Git"] = { title = "### 🔧 Git", keys = { "<leader>g" } },
    },
    v = {
      ["Telescope"] = { title = "### 🔍 Search & Telescope", keys = { "<leader>f" } },
      ["Git"] = { title = "### 🔧 Git", keys = { "<leader>g" } },
      ["Debug"] = { title = "### 🧪 Debugging", keys = { "<leader>d" } },
    },
    t = {
      ["Terminal"] = { title = "### 💻 Terminal Shortcuts", keys = { "<leader>q" } },
    },
  }

  local categorized = vim.deepcopy(categorized_by_mode[mode] or {})
  local maps = get(mode)
  local leader = vim.g.mapleader or "\\"
  local section = {
    "## " .. title,
    "",
    "<details><summary>Click to expand</summary>",
    "",
    "| Mapping | Description |",
    "|---------|-------------|",
  }
  table.sort(maps, function(a, b) return (a.lhs or "") < (b.lhs or "") end)
  for _, m in ipairs(maps) do
    local key = m.lhs and m.lhs:gsub("^" .. vim.pesc(leader), "<leader>") or nil
    if key and vim.startswith(m.lhs, leader) then
      local inserted = false
      for group, meta in pairs(categorized) do
        for _, prefix in ipairs(meta.keys) do
          if vim.startswith(key, prefix) and not meta.inserted then
            table.insert(section, "")
            table.insert(section, meta.title)
            table.insert(section, "")
            table.insert(section, "| Mapping | Description |")
            table.insert(section, "|---------|-------------|")
            meta.inserted = true
          end
          if vim.startswith(key, prefix) then
            table.insert(
              section,
              string.format("| `%s` | %s |", key, m.desc or (type(m.rhs) == "string" and m.rhs or "[function]"))
            )
            inserted = true
            break
          end
        end
        if inserted then break end
      end
      if not inserted then
        table.insert(
          section,
          string.format("| `%s` | %s |", key, m.desc or (type(m.rhs) == "string" and m.rhs or "[function]"))
        )
      end
    end
  end
  local grouped_lines = {}
  local leftover_lines = {}
  local collecting = false
  for _, line in ipairs(section) do
    if line:match "^### " then collecting = true end
    if collecting then
      table.insert(grouped_lines, line)
    else
      table.insert(leftover_lines, line)
    end
  end
  if #leftover_lines > 4 then
    table.insert(grouped_lines, 5, "")
    vim.list_extend(grouped_lines, leftover_lines)
  end
  if #grouped_lines > 4 then
    table.insert(grouped_lines, "")
    table.insert(grouped_lines, "</details>")
    return grouped_lines
  else
    return {}
  end
end

--- Converts multiple mode keymaps into a markdown file
---@param filepath string: where to write the output file
function M.to_markdown(filepath)
  vim.schedule(function()
    local keymap_api = vim.keymap or vim.api
    local get = keymap_api.get or vim.api.nvim_get_keymap
    if not get then
      vim.notify("❌ Cannot access keymap.get or nvim_get_keymap", vim.log.levels.ERROR)
      return
    end

    local lines = {
      '<p align="center">',
      '  <img src="https://raw.githubusercontent.com/AstroNvim/AstroNvim/main/assets/logo.svg" height="80"/>',
      "</p>",
      "",
      "# 🔑 AstroNvim Leader Keymaps",
      "",
      '<p align="center"><i>A comprehensive summary of your registered leader key mappings.</i></p>',
      "",
      "---",
      "",
      "This file is auto-generated by `:ExportKeymaps`",
      "",
    }

    for _, mode in ipairs { { "n", "Normal Mode" }, { "v", "Visual Mode" }, { "t", "Terminal Mode" } } do
      local section = collect_mappings(mode[1], mode[2], get)
      if #section > 0 then
        vim.list_extend(lines, section)
        table.insert(lines, "")
      end
    end

    vim.fn.writefile(lines, filepath)
    vim.notify("✅ Keymap export written to " .. filepath)
  end)
end

-- Register user command
vim.api.nvim_create_user_command(
  "ExportKeymaps",
  function() M.to_markdown(vim.fn.stdpath("config") .. "/keymaps.md") end,
  { desc = "Export all <leader> keymaps to markdown" }
)

-- Optional: export on plugin sync or exit
vim.api.nvim_create_autocmd("User", {
  pattern = "LazySync",
  callback = function() M.to_markdown(vim.fn.stdpath("config") .. "/keymaps.md") end,
})

vim.api.nvim_create_autocmd("VimLeavePre", {
  callback = function() M.to_markdown(vim.fn.stdpath("config") .. "/keymaps.md") end,
})

-- Add a terminal mode mapping to exit to normal mode
vim.keymap.set("t", "<leader>q", [[<C-\><C-n>]], { desc = "Exit terminal mode" })

return M
